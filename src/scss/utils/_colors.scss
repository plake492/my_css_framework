@mixin generate-color-var($key, $value) {
  --#{$key}: #{$value};

  @each $tone in $tones {
    --#{$key}-#{$tone}: #{get-color-scale-value($value, $tone)};
  }
}

// ************************************************* //
// ************ Generate Root color vars ************ //
// :root {
//   @each $key, $value in $target-colors {
//     @include generate-color-var($key, $value);
//   }
// }

/* Set default root colors*/
:root {
  --bg-color: #{$bg-primary};
  --text-color: #{$text-main};
}

// ************************************************* //
// ************ Generate Color Bg class ************ //
@each $key, $value in $target-colors {
  $text-color: get-contrasted-text($value);

  .bg-#{'' + $key} {
    /* Update Root colors, setting colors in child elements */
    --bg-color: #{$value};
    --text-color: #{$text-color};

    background: var(--bg-color);
    color: var(--text-color);
    transition: color 200ms ease-in-out, background 200ms ease-in-out;
  }

  // * Add tones as classes * //
  @each $tone in $tones {
    $bg-color-tone: get-color-scale-value($value, $tone);
    $text-color-tone: get-contrasted-text($bg-color-tone);

    .bg-#{'' + $key}-#{$tone} {
      /* Update Root colors, setting colors in child elements */
      --bg-color: #{$bg-color-tone};
      --text-color: #{$text-color-tone};

      background: var(--bg-color);
      color: var(--text-color);
      transition: color 200ms ease-in-out, background 200ms ease-in-out;
    }
  }
}
